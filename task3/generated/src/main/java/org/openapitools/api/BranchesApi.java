/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
* https://openapi-generator.tech
* Do not edit the class manually.
*//*

package org.openapitools.api;

import org.openapitools.model.Branches;
import org.openapitools.model.BranchesWithPredicting;
import org.openapitools.model.ErrorResponse;
import io.swagger.annotations.*;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
    import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
        import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

    import javax.validation.Valid;
    import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
    import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-06-27T13:51:53.205+03:00[Europe/Moscow]")

    @Validated
@Api(value = "branches",  description = "branches")
    public interface BranchesApi {
                default Optional<NativeWebRequest> getRequest() {
                    return Optional.empty();
                    }




            @ApiOperation(value = "getBranchesWithPredicting", nickname = "getBranchesWithPredictingUsingGET", notes = "", response = BranchesWithPredicting.class)
            @ApiResponses(value = { 
                @ApiResponse(code = 200, message = "OK", response = BranchesWithPredicting.class),
                @ApiResponse(code = 404, message = "NOT FOUND", response = ErrorResponse.class) })
            @RequestMapping(value = "/branches/{id}/predict",
                produces = { "application/json" }, 
            method = RequestMethod.GET)
        default ResponseEntity<BranchesWithPredicting> getBranchesWithPredictingUsingGET(@NotNull @ApiParam(value = "dayOgWeek", required = true) @Valid @RequestParam(value = "dayOgWeek", required = true) Integer dayOgWeek,@NotNull @ApiParam(value = "hourOfDay", required = true) @Valid @RequestParam(value = "hourOfDay", required = true) Integer hourOfDay,@ApiParam(value = "id",required=true) @PathVariable("id") Long id) {
            getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"address\" : \"address\", \"dayOfWeek\" : 0, \"hourOfDay\" : 6, \"lon\" : 5.637376656633329, \"id\" : 1, \"title\" : \"title\", \"lat\" : 5.962133916683182, \"predicting\" : 2 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

            }


            @ApiOperation(value = "getNearBranch", nickname = "getNearBranchUsingGET", notes = "", response = Branches.class)
            @ApiResponses(value = { 
                @ApiResponse(code = 200, message = "OK", response = Branches.class) })
            @RequestMapping(value = "/branches",
                produces = { "application/json" }, 
            method = RequestMethod.GET)
        default ResponseEntity<Branches> getNearBranchUsingGET(@NotNull @ApiParam(value = "lat", required = true) @Valid @RequestParam(value = "lat", required = true) Double lat,@NotNull @ApiParam(value = "lon", required = true) @Valid @RequestParam(value = "lon", required = true) Double lon) {
            getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"address\" : \"address\", \"lon\" : 1.4658129805029452, \"id\" : 0, \"title\" : \"title\", \"lat\" : 6.027456183070403 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

            }

        }
*/
