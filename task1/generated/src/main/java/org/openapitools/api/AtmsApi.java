/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.api;

import org.openapitools.model.AtmResponse;
import org.openapitools.model.ErrorResponse;
import io.swagger.annotations.*;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
    import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
        import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

    import javax.validation.Valid;
    import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
    import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-06-27T15:58:16.013+03:00[Europe/Moscow]")

    @Validated
@Api(value = "atms",  description = "atms")
    public interface AtmsApi {
                default Optional<NativeWebRequest> getRequest() {
                    return Optional.empty();
                    }

            @ApiOperation(value = "getById", nickname = "getByIdUsingGET", notes = "", response = AtmResponse.class)
            @ApiResponses(value = { 
                @ApiResponse(code = 200, message = "OK", response = AtmResponse.class),
                @ApiResponse(code = 404, message = "NOT FOUND", response = ErrorResponse.class) })
            @RequestMapping(value = "/atms/{id}",
                produces = { "*/*" }, 
            method = RequestMethod.GET)
        default ResponseEntity<AtmResponse> getByIdUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") Integer id) {
            getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"city\" : \"city\", \"latitude\" : \"latitude\", \"payments\" : true, \"location\" : \"location\", \"deviceId\" : 0, \"longitude\" : \"longitude\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

            }


            @ApiOperation(value = "getNearestAtm", nickname = "getNearestAtmUsingGET", notes = "", response = AtmResponse.class)
            @ApiResponses(value = { 
                @ApiResponse(code = 200, message = "OK", response = AtmResponse.class) })
            @RequestMapping(value = "/atms/nearest",
                produces = { "*/*" }, 
            method = RequestMethod.GET)
        default ResponseEntity<AtmResponse> getNearestAtmUsingGET(@ApiParam(value = "latitude") @Valid @RequestParam(value = "latitude", required = false) Optional<String> latitude,@ApiParam(value = "longitude") @Valid @RequestParam(value = "longitude", required = false) Optional<String> longitude,@ApiParam(value = "payments", defaultValue = "false") @Valid @RequestParam(value = "payments", required = false, defaultValue="false") Optional<Boolean> payments) {
            getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"city\" : \"city\", \"latitude\" : \"latitude\", \"payments\" : true, \"location\" : \"location\", \"deviceId\" : 0, \"longitude\" : \"longitude\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

            }


            @ApiOperation(value = "getNearestAtmsWithMoney", nickname = "getNearestAtmsWithMoneyUsingGET", notes = "", response = AtmResponse.class, responseContainer = "List")
            @ApiResponses(value = { 
                @ApiResponse(code = 200, message = "OK", response = AtmResponse.class, responseContainer = "List") })
            @RequestMapping(value = "/atms/nearest-with-alfik",
                produces = { "*/*" }, 
            method = RequestMethod.GET)
        default ResponseEntity<List<AtmResponse>> getNearestAtmsWithMoneyUsingGET(@ApiParam(value = "alfik") @Valid @RequestParam(value = "alfik", required = false) Optional<Integer> alfik,@ApiParam(value = "latitude") @Valid @RequestParam(value = "latitude", required = false) Optional<String> latitude,@ApiParam(value = "longitude") @Valid @RequestParam(value = "longitude", required = false) Optional<String> longitude) {
            getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"city\" : \"city\", \"latitude\" : \"latitude\", \"payments\" : true, \"location\" : \"location\", \"deviceId\" : 0, \"longitude\" : \"longitude\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

            }

        }
